<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <UseWPF>true</UseWPF>
    <UseWindowsForms>true</UseWindowsForms>
    <WebView2InstallMode>Embed</WebView2InstallMode>
    <RootNamespace>RimSharp</RootNamespace>
    <ApplicationIcon>icon.ico</ApplicationIcon>
    <ApplicationManifest>app.manifest</ApplicationManifest>
  </PropertyGroup>

  <ItemGroup>
    <ApplicationDefinition Include="AppDir\AppFiles\App.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </ApplicationDefinition>
    <Compile Update="AppDir\AppFiles\App.xaml.cs">
      <DependentUpon>AppDir\AppFiles\App.xaml</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="FuzzySharp" Version="2.0.2" />
    <PackageReference Include="LibGit2Sharp" Version="0.31.0" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.3" />
    <PackageReference Include="Microsoft.Extensions.Http" Version="9.0.3" />
    <PackageReference Include="Microsoft.Web.WebView2" Version="1.0.2365.46" />
    <PackageReference Include="Microsoft.Xaml.Behaviors.Wpf" Version="1.1.135" />
    <PackageReference Include="PInvoke.Shell32" Version="0.7.124" />
    <PackageReference Include="PInvoke.User32" Version="0.7.124" />
    <PackageReference Include="QuikGraph" Version="2.5.0" />
  </ItemGroup>
  <ItemGroup>
    <!-- Include all files under Rules\db -->
    <None Include="Rules\db\**\*">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

    <!-- Create default rules.json if it doesn't exist -->
    <None Include="Rules\db\rules.json" Condition="!Exists('Rules\db\rules.json')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Content>{"rules":{}}</Content>
    </None>

    <!-- Create default replacements.json if it doesn't exist -->
    <None Include="Rules\db\replacements.json" Condition="!Exists('Rules\db\replacements.json')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Content>{"mods":{}}</Content>
    </None>

    <!-- Existing items -->
    <None Include="Lists\**\*" Condition="Exists('Lists\**\*')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

  </ItemGroup>

  <Target Name="EnsureRulesDirectoryExists" BeforeTargets="PrepareForBuild">
    <!-- Create Rules\db directory if it doesn't exist -->
    <MakeDir Directories="$(ProjectDir)Rules\db" Condition="!Exists('$(ProjectDir)Rules\db')" />

    <!-- Create default rules.json if it doesn't exist -->
    <WriteLinesToFile File="$(ProjectDir)Rules\db\rules.json" Lines="{&quot;rules&quot;:{}}" Overwrite="false" Condition="!Exists('$(ProjectDir)Rules\db\rules.json')" />

    <!-- Create default replacements.json if it doesn't exist -->
    <WriteLinesToFile File="$(ProjectDir)Rules\db\replacements.json" Lines="{&quot;mods&quot;:{}}" Overwrite="false" Condition="!Exists('$(ProjectDir)Rules\db\replacements.json')" />
  </Target>

  <Target Name="PostBuild" AfterTargets="PostBuild">
    <!-- Create output folders -->
    <MakeDir Directories="$(OutputPath)Rules\db" />
    <MakeDir Directories="$(OutputPath)Lists" />

    <!-- Copy Rules\db contents -->
    <Copy SourceFiles="@(None)" DestinationFiles="@(None->'$(OutputPath)%(RelativeDir)%(Filename)%(Extension)')" Condition="'%(None.RelativeDir)' != '' AND '%(None.RelativeDir)'.StartsWith('Rules\db\')" />
  </Target>
</Project>